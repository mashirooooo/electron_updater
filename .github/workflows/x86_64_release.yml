name: updater-release
on:
  release:
    types: [created]

jobs:
  build-release:
    name: build-release
    strategy:
      matrix:
        build: [linux-x86_64,macos-x86_64,windows-x86_64-msvc,windows-i686-msvc]
        include:
          - build: linux-x86_64
            os: ubuntu-latest
            osname: linux
            rust: stable-x86_64-unknown-linux-gnu
            target: x86_64-unknown-linux-gnu
          - build: macos-x86_64
            os: macos-latest
            osname: macos
            rust: stable-x86_64-apple-darwin
            target: x86_64-apple-darwin
          - build: windows-x86_64-msvc
            os: windows-latest
            osname: win
            rust: stable-x86_64-pc-windows-msvc
            target: x86_64-pc-windows-msvc
          - build: windows-i686-msvc
            os: windows-latest
            osname: win
            rust: stable-i686-pc-windows-msvc
            target: i686-pc-windows-msvc

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: install rustup
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > rustup-init.sh
          sh rustup-init.sh -y --default-toolchain ${{ matrix.rust }}
          rustup target add ${{ matrix.target }}
      - name: install dependencies
        run: |
          sudo apt update
          sudo apt install libx11-dev libpango1.0-dev libxkbcommon-dev libxkbcommon-x11-dev libgtk-3-dev gcc-multilib
        if: contains(matrix.os, 'ubuntu')
      # Run build
      - name: Build release druid features
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --no-default-features --features druid --target=${{ matrix.target }}

      - name: Build archive druid features
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            echo "ASSET=target/${{matrix.target}}/release/updater.exe" >> $GITHUB_ENV
            if [ "${{ matrix.target }}" = "i686-pc-windows-msvc" ]; then
              echo "ASSETNAME=updater_win_ia32.exe" >> $GITHUB_ENV
            else
              echo "ASSETNAME=updater_win_x64.exe" >> $GITHUB_ENV
            fi
          else
            echo "ASSET=target/${{matrix.target}}/release/updater" >> $GITHUB_ENV
            echo "ASSETNAME=updater_${{matrix.osname}}_x64" >> $GITHUB_ENV
          fi

      - name: Upload Release Asset druid features
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ env.ASSET }}
          asset_name: ${{ env.ASSETNAME }}
          asset_content_type: application/octet-stream

      # Run build
      - name: Build release no features
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --no-default-features --target=${{ matrix.target }}

      - name: Build archive no features
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            echo "ASSETCLI=target/${{matrix.target}}/release/updater.exe" >> $GITHUB_ENV
            if [ "${{ matrix.target }}" = "i686-pc-windows-msvc" ]; then
              echo "ASSETCLINAME=updater_cli_win_ia32.exe" >> $GITHUB_ENV
            else
              echo "ASSETCLINAME=updater_cli_win_x64.exe" >> $GITHUB_ENV
            fi
          else
            echo "ASSETCLI=target/${{matrix.target}}/release/updater" >> $GITHUB_ENV
            echo "ASSETCLINAME=updater_cli_${{matrix.osname}}_x64" >> $GITHUB_ENV
          fi

      - name: Upload Release AssetCLI no features
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ env.ASSETCLI }}
          asset_name: ${{ env.ASSETCLINAME }}
          asset_content_type: application/octet-stream
      # Run build
      - name: Build release druid and debug features
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --no-default-features --features druid,debug --target=${{ matrix.target }}

      - name: Build archive druid and debug features
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            echo "ASSET=target/${{matrix.target}}/release/updater.exe" >> $GITHUB_ENV
            if [ "${{ matrix.target }}" = "i686-pc-windows-msvc" ]; then
              echo "ASSETNAME=debug_updater_win_ia32.exe" >> $GITHUB_ENV
            else
              echo "ASSETNAME=debug_updater_win_x64.exe" >> $GITHUB_ENV
            fi
          else
            echo "ASSET=target/${{matrix.target}}/release/updater" >> $GITHUB_ENV
            echo "ASSETNAME=debug_updater_${{matrix.osname}}_x64" >> $GITHUB_ENV
          fi

      - name: Upload Release Asset druid and debug features
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ env.ASSET }}
          asset_name: ${{ env.ASSETNAME }}
          asset_content_type: application/octet-stream

      # Run build
      - name: Build release debug features
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release  --no-default-features --features debug --target=${{ matrix.target }}

      - name: Build archive debug features
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            echo "ASSETCLI=target/${{matrix.target}}/release/updater.exe" >> $GITHUB_ENV
            if [ "${{ matrix.target }}" = "i686-pc-windows-msvc" ]; then
              echo "ASSETCLINAME=debug_updater_cli_win_ia32.exe" >> $GITHUB_ENV
            else
              echo "ASSETCLINAME=debug_updater_cli_win_x64.exe" >> $GITHUB_ENV
            fi
          else
            echo "ASSETCLI=target/${{matrix.target}}/release/updater" >> $GITHUB_ENV
            echo "ASSETCLINAME=debug_updater_cli_${{matrix.osname}}_x64" >> $GITHUB_ENV
          fi

      - name: Upload Release AssetCLI debug features
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ env.ASSETCLI }}
          asset_name: ${{ env.ASSETCLINAME }}
          asset_content_type: application/octet-stream
